#!/usr/bin/env bash

function installed { cmd=$(command -v "${1}"); [[ -n "${cmd}" ]] && [[ -f "${cmd}" ]]; return ${?}; }
function die { >&2 echo "Fatal: ${@}"; exit 1; }

deps=(git sed head ssh awk tail)
for dep in "${deps[@]}"; do installed "${dep}" || die "Missing '${dep}'"; done

#==============================================================================
# NAME
#       coder
#
# SYNOPSIS
#       coder [command]
#
# DESCRIPTION
#       This script sets up our 'coder' command overrides. The coder
#       that runs, should always be THIS function and when necessary it
#       should delegate commands to the Cellar coder-cli. But the Cellar
#       coder-cli program should not be in the path because otherwise
#       it gets confusing as to which function should be running.
#
#       command can be one of the following:
#
#       rebuild
#           Rebuild the anthony-dev coder workspace, and then follow the build
#           steps inside the terminal
#       start
#           Rebuild the anthony-dev coder workspace
#       stop
#           Stop the anthony-dev coder workspace
#       reset
#           Reset the anthony-dev coder workspace's KW git branch/state
#           to the local KW branch state. This will clean the working directory,
#           pull the latest master state, and create a branch named after the
#           local branch.
#       status
#           Print the current status of the anthony-dev coder workspace

# ENVIRONMENT:
#       Make sure this script is in the $PATH and the coder CLI is installed
#       via Homebrew.
#==============================================================================

coder_cli="/usr/local/Cellar/coder-cli/1.23.0/bin/coder"
coder_workspace="anthony-dev"

if [[ "$(which coder)" = "/usr/local/bin/coder" ]]; then
    echo "Coder was referencing the /usr/local/bin."
    echo "Removing the symlink so this instance of coder can be run instead."
    rm /usr/local/bin/coder
fi

function coder__start() {
  flags="${@}"
  command "${coder_cli}" envs rebuild "${coder_workspace}" --force ${flags}
}

function coder__rebuild() {
  coder__start "--follow"
}

function coder__stop() {
  command "${coder_cli}" envs stop "${coder_workspace}"
}

function coder__reset() {
  # Get the local branch name we're on in KW
  local branchName=$(git -C ~/kazoo-web branch | sed "s/^. //" | head -n 1)

  ssh -t coder \
<<EOF
  . ~/.bashrc
  kw
  git clean -fd
  git clean -f
  git checkout .
  if [[ ! "\$(getBranch)" == "master" ]]; then
    branch=\$(getBranch)
    echo "Branch: \$branch"
    gcm
    git branch -D "\$branch"
  fi
  git pull
  git checkout -b "$branchName"

EOF
}

# Return the status (ON/OFF/CREATING) of our coder instance
function coder__status() {
    command "${coder_cli}" envs ls | awk '{ print $6 }' | tail -n 1
}

function coder() {
  local cmdname=$1; shift
  if type "coder__$cmdname" >/dev/null 2>&1; then
    "coder__$cmdname" "$@"
  else
    command "${coder_cli}" "$cmdname" "$@" # call the **real** coder command
  fi
}

# Since any of this COULD be called from a subshell, we have to make sure
# all of it is exported so they can reference themselves. It's a bit of a
# mind-bender, but basically just because it's in this file, doesn't mean
# they implicitly know about each other.

export -f coder__rebuild
export -f coder__reset
export -f coder__status
export -f coder__stop
export -f coder__start
export -f coder

export coder_cli
export coder_workspace
